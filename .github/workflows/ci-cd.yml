---
name: CI/CD
on:
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:

env:
  IMAGE_NAME: iypetrov/go-calc
  CLUSTER_NAME: k8s-1-28-2-do-0-lon1-1703886052664

jobs:
  build-test-image:
    name: Build test image
    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  linter:
    name: Linter
    needs: [ build-test-image ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false

      - name: Golang linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54

  sec-scan-image:
    name: Scan image for vulnerabilities
    needs: [ build-test-image ]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      security-events: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }}

      - name: Run Trivy for all CVEs and report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }}
          exit-code: 0
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test-unit:
    name: Run unit tests in Docker
    needs: [ build-test-image ]
    runs-on: ubuntu-latest

    permissions:
      packages: read

    steps:

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: docker run --rm ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }} make test

  test-load:
    name: Run load tests using K6
    needs: [ build-test-image ]
    runs-on: ubuntu-latest

    permissions:
      packages: read

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run K6 tests
        run: |
          docker network create test-network ; \
          docker run --rm -d --name app --network test-network -p 8080:8080 ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }} ; \
          docker run --network test-network --rm -i grafana/k6 run - <testing/load/sum.js

  test-health-check:
    name: Curl health check endpoint
    needs: [ build-test-image ]
    runs-on: ubuntu-latest

    permissions:
      packages: read

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Curl health check endpoint
        run: |
          docker run --rm -d -p 8080:8080 ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }} ; \
          for i in {1..3}; do curl -f -m 10 http://0.0.0.0:8080/health-check && break ; sleep 5 ; done \

  build-final-image:
    name: Build deploy image
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [ linter, sec-scan-image, test-unit, test-load, test-health-check ]
    runs-on: ubuntu-latest

    permissions:
      packages: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  kube-deploy:
    name: Deploy to K8s
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [ build-final-image ]
    runs-on: ubuntu-latest

    permissions:
      packages: write
      pull-requests: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}

      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN_KEY }}

      - name: Set up kubectl
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to K8s
        run: |
          export FINAL_IMAGE_NAME=${{ steps.docker_meta.outputs.tags }}
          cat manifests/application.yml | envsubst | kubectl apply -f -

  slack-notification:
    name: Send Slack alert
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [ kube-deploy ]
    runs-on: ubuntu-latest

    permissions:
      packages: write
      pull-requests: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}

      - name: Send Slack notification
        id: slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
               "attachments": [
                 {
                   "color": "28a745",
                   "fields": [
                     {
                       "title": "Status",
                       "short": true,
                       "value": "${{ steps.docker_meta.outputs.tags }} is deployed"
                     }
                   ]
                 }
               ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK