---
  name: CI/CD 
  on:
    push:
      branches:
        - main
      tags:
        - "[0-9]+.[0-9]+.[0-9]+"
    pull_request:
  
  env:
    IMAGE_NAME: iypetrov/go-calc 
    CLUSTER_NAME: k8s-1-28-2-do-0-lon1-1703886052664

  jobs:
    build-test-image:
      name: Build test image
      runs-on: ubuntu-latest
  
      permissions:
        packages: write 
  
      steps:
        
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to ghcr.io
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Build and push to GHCR
          uses: docker/build-push-action@v5
          with:
            push: true
            tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64
   
    linter:
      name: Linter
      needs: [build-test-image]
      runs-on: ubuntu-latest

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.18'
            cache: false

        - name: Golang linter
          uses: golangci/golangci-lint-action@v3
          with:
            version: v1.54
          
    scan-image:
      name: Scan image for vulnerabilities
      needs: [build-test-image]
      runs-on: ubuntu-latest
  
      permissions:
        contents: read
        packages: read
        security-events: write 
  
      steps:
  
        - name: Checkout
          uses: actions/checkout@v4
        
        - name: Login to ghcr.io
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
  
        - name: Pull image to scan
          run: docker pull ghcr.io/${{ env.IMAGE_NAME }}:"$GITHUB_RUN_ID"
          
        - name: Run Trivy for all CVEs and report
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.run_id }}
            exit-code: 0
            ignore-unfixed: true
            format: 'sarif'
            output: 'trivy-results.sarif'
  
        - name: Upload Trivy scan results to GitHub Security tab
          uses: github/codeql-action/upload-sarif@v2
          if: always()
          with:
            sarif_file: 'trivy-results.sarif' 
    
    test-unit:
      name: Unit testing in Docker
      needs: [build-test-image]
      runs-on: ubuntu-latest
  
      permissions:
        packages: read
        
      steps:
        
        - name: Login to ghcr.io
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Run unit tests
          run: docker run --rm ghcr.io/${{ env.IMAGE_NAME }}:"$GITHUB_RUN_ID" make test

    build-final-image:
      name: Build deploy image
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      needs: [linter, scan-image, test-unit]
      runs-on: ubuntu-latest

      permissions:
        packages: write 
        pull-requests: write 

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Docker metadata
          id: docker_meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.IMAGE_NAME }}
            flavor: |
              latest=false
            tags: |
              type=semver,pattern={{version}}

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
  
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
  
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build and push to Docker Hub
          uses: docker/build-push-action@v5
          with:
            push: true
            tags: |
              ${{ steps.docker_meta.outputs.tags }}
              ${{ env.IMAGE_NAME }}:latest
            labels: ${{ steps.docker_meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64

    kube-deploy:
        name: Deploy to K8s
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        needs: [build-final-image]
        runs-on: ubuntu-latest

        permissions:
          packages: write 
          pull-requests: write 
        
        steps:

        - name: Checkout
          uses: actions/checkout@v4
        
        - name: Docker metadata
          id: docker_meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.IMAGE_NAME }}
            flavor: |
              latest=false
            tags: |
              type=semver,pattern={{version}}

        - name: Set up doctl
          uses: digitalocean/action-doctl@v2
          with:
            token: ${{ secrets.DO_API_TOKEN_KEY }}

        - name: Set up kubectl    
          uses: tale/kubectl-action@v1
          with:
            base64-kube-config: ${{ secrets.KUBE_CONFIG }}

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        
        - name: Deploy to K8s
          run: |
            export FINAL_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}
            cat manifests/application.yml | envsubst | kubectl apply -f -
