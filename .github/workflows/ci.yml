---
  name: CI 
  on:
    push:
      branches:
        - main
    pull_request:
  
  jobs:
    build-test-image:
      name: Build Test Image
      runs-on: ubuntu-latest
  
      permissions:
        packages: write 
  
      steps:
        
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to ghcr.io
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Build and Push to GHCR
          uses: docker/build-push-action@v5
          with:
            push: true
            tags: ghcr.io/iypetrov/go-calc:${{ github.run_id }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64

    test-unit:
      name: Unit testing in Docker
      needs: [build-test-image]
      runs-on: ubuntu-latest
  
      permissions:
        packages: read
        
      steps:
        
        - name: Login to ghcr.io
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Run unit tests
          run: docker run --rm ghcr.io/iypetrov/go-calc:"$GITHUB_RUN_ID" make test
   
    linter:
      name: Linter
      needs: [build-test-image]
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-go@v4
          with:
            go-version: '1.18'
            cache: false
        - name: golangci-lint
          uses: golangci/golangci-lint-action@v3
          with:
            version: v1.54
          
    scan-image:
      name: Scan image for vulnerabilities
      needs: [build-test-image]
      runs-on: ubuntu-latest
  
      permissions:
        contents: read
        packages: read
        security-events: write 
  
      steps:
  
        - name: Checkout git repo
          uses: actions/checkout@v4
        
        - name: Login to ghcr.io
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
  
        - name: Pull image to scan
          run: docker pull ghcr.io/iypetrov/go-calc:"$GITHUB_RUN_ID"
          
        - name: Run Trivy for all CVEs and report
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ghcr.io/iypetrov/go-calc:${{ github.run_id }}
            exit-code: 0
            ignore-unfixed: true
            format: 'sarif'
            output: 'trivy-results.sarif'
  
        - name: Upload Trivy scan results to GitHub Security tab
          uses: github/codeql-action/upload-sarif@v2
          if: always()
          with:
            sarif_file: 'trivy-results.sarif' 
    
    build-final-image:
      name: Build final image
      needs: [test-unit, linter, scan-image]
      runs-on: ubuntu-latest

      permissions:
        packages: write 
        pull-requests: write 

      steps:

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
  
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
  
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Bump version and push tag
          id: tag_version
          uses: mathieudutour/github-tag-action@v6.1
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}

        - name: Build and Push to Docker Hub
          uses: docker/build-push-action@v5
          with:
            push: true
            tags: ${{ steps.tag_version.outputs.new_tag }}
            labels: ${{ steps.tag_version.outputs.new_tag }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64,linux/arm64,linux/arm/v7
      
        - name: Find comment for image tags
          uses: peter-evans/find-comment@v1
          if: github.event_name == 'pull_request'
          id: fc
          with:
            issue-number: ${{ github.event.pull_request.number }}
            comment-author: 'github-actions[bot]'
            body-includes: Docker image tag(s) pushed
      
        - name: Create or update comment for image tags
          uses: peter-evans/create-or-update-comment@v1
          if: github.event_name == 'pull_request'
          with:
            comment-id: ${{ steps.fc.outputs.comment-id }}
            issue-number: ${{ github.event.pull_request.number }}
            body: |
              Docker image tag(s) pushed:
              ```text
              ${{ steps.tag_version.outputs.new_tag }}
              ```

              Labels added to images:
              ```text
              ${{ steps.tag_version.outputs.new_tag }}
              ```
            edit-mode: replace